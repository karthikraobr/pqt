package main

import (
	"fmt"
	"log"
	"os"

	"github.com/piotrkowalczuk/pqt/pqtgo/pqtgogen"
	"github.com/piotrkowalczuk/pqt/pqtsql"
)

const version = 9.5

func main() {
	goCodeFile, err := os.Create("schema.pqt.go")
	if err != nil {
		log.Fatal(err)
	}
	defer goCodeFile.Close()
	goTestFile, err := os.Create("schema.pqt_test.go")
	if err != nil {
		log.Fatal(err)
	}
	defer goTestFile.Close()

	fmt.Fprint(goCodeFile, `
        // Code generated by pqt.
        // source: cmd/appg/main.go
        // DO NOT EDIT!
    `)
	sch := schema("example")
	goGen := pqtgogen.Generator{
		Pkg:     "model",
		Version: version,
		Plugins: []pqtgogen.Plugin{
			&generator{},
		},
		Components: pqtgogen.ComponentAll,
	}
	sqlGen := &pqtsql.Generator{Version: version}

	err = goGen.GenerateTo(goCodeFile, sch)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Fprint(goCodeFile, "/// SQL ...\n")
	fmt.Fprint(goCodeFile, "const SQL = `\n")

	if err = sqlGen.GenerateTo(sch, goCodeFile); err != nil {
		log.Fatal(err)
	}
	fmt.Fprint(goCodeFile, "`")

	if err = goGen.GenerateTestsTo(goTestFile, sch); err != nil {
		log.Fatal(err)
	}
}
